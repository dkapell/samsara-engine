mixin players(users)

    - moment.relativeTimeThreshold('ss', 0);
    .table-responsive
        table.table.table-striped.table-sorted.table-hover.my-3.dt-responsive.nowrap.table-sm#players-table
            thead
                tr
                    th
                    if runs
                        th(data-priority="6") Run
                    th(data-priority="5") Group
                    th(data-priority="1", data-order='asc') Name
                    th(data-priority="2") Character
                    th Email
                    th(data-priority="4") Game State
                    th(data-priority="3")
            tbody
                for user in users
                    tr
                        td.dtr-expand
                        if runs
                            td= runs[user.player.run_id].name
                        td
                            if user.player.groups.length
                                | #{_.pluck(user.player.groups, 'name').join(', ')}
                            else
                                i Ungrouped
                        td= user.name
                            if (user.connected)
                                .badge.badge-success.ml-2 Connected
                        td= user.player.character
                        td= user.email
                        td
                            if user.gamestate.current
                                if user.gamestate.transitioning
                                    a.badge.badge-light.badge-gamestate(href=`/gamestate/${user.gamestate.prev.id}`)
                                        | #{user.gamestate.prev.name}
                                    i.fas.fa-arrow-right.fa-fw.mx-1
                                    a.badge.badge-light.badge-gamestate(href=`/gamestate/${user.gamestate.next.id}`)
                                        | #{user.gamestate.next.name}
                                    span.ml-2 #{moment(user.player.statetime).fromNow()}
                                else
                                    a.badge.badge-light.badge-gamestate(href=`/gamestate/${user.gamestate.current.id}`)
                                        | #{user.gamestate.current.name}
                            else
                                i Unknown
                        td.text-right
                            if (user.connected)
                                a.btn.btn-outline-info.btn-sm.mx-1.player-message-btn(
                                    role="button"
                                    data-toggle="modal"
                                    data-target="#toastModal"
                                    data-type="user"
                                    data-user=user.id
                                    data-name=user.name
                                    title="Message User"
                                )
                                    i.fas.fa-comment
                            for trigger in user.triggers
                                //triggers.filter(trigger => { return trigger.player; })
                                if trigger.icon
                                    +triggerButton(trigger, user.id, false)(class='btn-sm mx-1')



                            a.btn.btn-outline-info.btn-sm.mx-1.player-viewdata-btn(
                                role="button"
                                data-toggle="modal"
                                data-target="#dataModal"
                                data-user=user.id
                                data-name=user.name
                                data-userdata=JSON.stringify(user.player.data)
                                title="View Player Data"
                            )
                                i.fas.fa-search

                            a.btn.btn-outline-info.mr-1.btn-sm.player-advance-btn(
                                role="button",
                                url=`/player/${user.id}/advance`,
                                data-csrf=csrfToken,
                                data-back=`/run/${user.player.run_id}`
                                data-toggle="tooltip"
                                title="Advance User State"
                            )
                                i.fas.fa-arrow-right

                            a.btn.btn-success.mr-1.btn-sm.player-advance-btn-confirm(
                                role="button",
                                url=`/player/${user.id}/advance`,
                                data-csrf=csrfToken,
                                data-back=`/run/${user.player.run_id}`
                            )
                                o.fa.fa-check
                            a.btn.btn-danger.mr-1.btn-sm.player-advance-btn-cancel(role="button")
                                o.fa.fa-times
                            a.btn.btn-outline-warning.btn-sm(
                                role="button"
                                href=`/player/${user.id}/assume`
                                data-toggle="tooltip"
                                title="Assume User"
                                )
                                i.fas.fa-user-secret

    .modal.fade#toastModal(role="dialog" tabindex="-1" aria-labelledby="toastModalLabel" aria-hidden="true")
        .modal-dialog.modal-dialog-centered(role="document")
            .modal-content
                .modal-header
                    h5.modal-title#toastModalLabel Send Message to Player
                    button.close#dismissToastModal(type="button", data-dismiss="modal" area-label="Close")
                        span(aria-hidden="true") &times;
                .modal-body
                    .form
                        .form-group
                            label.col-form-label(for="toastText") Message:
                            textarea.form-control#toastText
                        .form-group
                            .custom-control.custom-switch
                                input.custom-control-input#toastAutohide(type="checkbox", checked=true)
                                label.custom-control-label(for="toastAutohide") Autohide after 30 seconds
                .modal-footer
                    button.btn.btn-secondary(type="button", data-dismiss="modal") Close
                    button.btn.btn-primary#toastSend(type="button",data-csrf=csrfToken ) Send Message

    .modal.fade#dataModal(role="dialog" tabindex="-1" aria-labelledby="dataModalLabel" aria-hidden="true")
        .modal-dialog.modal-dialog-centered(role="document")
            .modal-content
                .modal-header
                    h5.modal-title#dataModalLabel Player Data
                    button.close#dismissDataModal(type="button", data-dismiss="modal" area-label="Close")
                        span(aria-hidden="true") &times;
                pre.modal-body

                .modal-footer
                    button.btn.btn-secondary(type="button", data-dismiss="modal") Close




