mixin area(area, id, links)
    .list-group-item.area-config(id=`area-${id}`)
        .form-row.mb-3
            label.col-md-1.d-md-none.d-lg-block.col-form-label(for="gamestate_map_area_name-" + id ) Name
            .col-md-6
                input.form-control.area-name(
                    id=`gamestate_map_area_name-${id}`,
                    name=`gamestate[map][${id}][name]`,
                    value=area.name,
                    data-updated='self',
                    placeholder="Area Name.  Leave empty to calculate from actions",
                    required=id!== 'new'
                )
            label.col-md-1.d-md-none.d-lg-block.col-form-label(for="gamestate_map_area_shape-" + id ) Shape
            .col-md-2
                select.custom-select(
                    name=`gamestate[map][${id}][shape]`,
                    id=`gamestate_map_area_shape-${id}`,
                    class=id!=='new'?'select2':'',
                    data-placeholder="Select Shape"
                    required=id!== 'new'
                )
                    option
                    for shape in ['rect', 'circle', 'poly']
                        option(value=shape selected=area.shape===shape)= shape
            .col-md-2.text-right
                button.btn.btn-sm.btn-outline-success.add-action-btn.mr-1(data-toggle="tooltip" title='Add Action' data-area=id)
                    i.fa.fa-plus
                button.btn.btn-sm.btn-outline-danger.remove-area-btn(data-toggle="tooltip" title='Remove Area' data-placement="right")
                    i.fa.fa-trash
        .form-row.mb-3
            label.col-md-1.d-md-none.d-lg-block.col-form-label(for=`gamestate_map_area_coords-${id}` ) Coords
            .col
                input.form-control(
                    name=`gamestate[map][${id}][coords]`,
                    value=area.coords,
                    id=`gamestate_map_area_coords-${id}`,
                    placeholder="Coordinates",
                    required=id!== 'new'
                )



        if _.isArray(area.actions)
            - let actionId = 0;
            for action in area.actions
                +action(action, id, actionId, links)
                - actionId++


mixin action(action, areaId, actionId, links)
    .action-row.border-top.border-secondary(id=`action-${areaId}-${actionId}`)
        .form-row.my-1
            label.col-md-1.col-form-label(for=`gamestate_map_area-${areaId}-action-${actionId}-type`) Action
            .col-md-2
                select.custom-select.action-type-select(
                    name=`gamestate[map][${areaId}][actions][${actionId}][type]`,
                    id=`gamestate_map_area-${areaId}-action-${actionId}-type`,
                    class=actionId!=='new'?'select2':'',
                    data-placeholder="Type",
                )
                    option
                    for type in ['link', 'text', 'transition']
                        option(value=type, selected=action.type === type)= type


            label.col-md-2.col-form-label.action-link(for=`gamestate_map_area-${areaId}-action-${actionId}-link_id` ) Link
            .col-md-6.action-link
                select.custom-select.link-select(
                    name=`gamestate[map][${areaId}][actions][${actionId}][link_id]`,
                    id=`gamestate_map_area-${areaId}-action-${actionId}-link_id`,
                    class=actionId!=='new'?'select2':'',
                    data-placeholder="Select Link",
                )
                    option
                    for link in links
                        option(value=link.id selected=action.link_id && Number(action.link_id)===link.id)= link.name


            label.col-md-2.col-form-label.action-text(for=`gamestate_map_area-${areaId}-action-${actionId}-content` ) Display Text
            .col-md-6.action-text
                    textarea.form-control(
                        name=`gamestate[map][${areaId}][actions][${actionId}][content]`,
                        id=`gamestate_map_area-${areaId}-action-${actionId}-content`,
                        rows=3
                    )
                        = action.content

            label.col-md-2.col-form-label.action-transition(for=`gamestate_map_area-${areaId}-action-${actionId}-to_state_id` ) To State
            .col-md-6.action-transition
                select.custom-select(
                    name=`gamestate[map][${areaId}][actions][${actionId}][to_state_id]`,
                    id=`gamestate_map_area-${areaId}-action-${actionId}-to_state_id`,
                    class=actionId!=='new'?'select2':'',
                    data-placeholder="Select Gamestate",
                )
                    option
                    for gamestate in gamestates
                        option(value=gamestate.id selected=action.to_state_id && Number(action.to_state_id)===gamestate.id)= gamestate.name


            .col.text-right
                    button.btn.btn-sm.btn-outline-danger.remove-action-btn(data-toggle="tooltip" data-placement="right" title='Remove Action')
                        i.fa.fa-trash
        .form-row.my-1.action-transition
            label.col-md-2.offset-md-3.col-form-label(
                for=`gamestate_map_area-${areaId}-action-${actionId}-delay`
            ) Delay in Seconds
            input.col-md-1.form-control(
                type="number",
                placeholder="Delay",
                name=`gamestate[map][${areaId}][actions][${actionId}][delay]`,
                id=`gamestate_map_area-${areaId}-action-${actionId}-delay`,
                value=action.delay?action.delay:0)
            label.col-md-2.col-form-label(
                for=`gamestate_map_area-${areaId}-action-${actionId}-group_id`
            ) Player Group
            .col-md-3
                select.custom-select(
                    name=`gamestate[map][${areaId}][actions][${actionId}][group_id]`
                    id=`gamestate_map_area-${areaId}-action-${actionId}-group_id`,
                    class=actionId!=='new'?'select2':'',
                )
                    option(selected=!action.group_id value="-1") All
                    for group in groups
                        option(
                            value=group.id
                            selected=action.group_id && Number(action.group_id)===group.id
                        )= group.name

        .form-row.my-1.action-text
            label.col-md-2.offset-md-3.col-form-label(
                for=`gamestate_map_area-${areaId}-action-${actionId}-duration`
            ) Duration in Seconds
            input.col-md-1.form-control(
                type="number",
                placeholder="Duration",
                name=`gamestate[map][${areaId}][actions][${actionId}][duration]`,
                id=`gamestate_map_area-${areaId}-action-${actionId}-duration`,
                value=action.duration?action.duration:0)
            .col-md-2.form-text ( 0 for unlimited )

mixin areaCard(areaId, area, gamestates, links)
    - moment.relativeTimeThreshold('ss', 0);
    .card.area-detail-card.my-2(id=`area-detail-${areaId}`)
        .card-header #{area.name}
        ul.list-group.list-group-flush
            for action in area.actions
                .list-group-item
                    case action.type
                        when 'link'
                            strong.mr-1 Open Link
                            i #{links[action.link_id].name}
                        when 'text'
                            strong.mr-1 Display Text
                            br
                            | #{action.content}
                        when 'transition'
                            strong.mr-1 Transition to state
                            i.mr-1 #{_.findWhere(gamestates, {id: action.to_state_id}).name}
                            if action.group_id
                                br
                            if action.group_id
                                | for
                                i.mx-1 #{_.findWhere(groups, {id: action.group_id}).name}
                            if action.delay
                                | after #{moment.duration(action.delay, "seconds").humanize()}
                            else
                                | immediately
                        default
                            | None
